# 🚀 **GOD-LEVEL PROMPT: Full Stack Expense Tracker Application**

```
Create a production-ready full stack Expense Tracker application with the following SPECIFICATIONS:

## 🎯 PROJECT OVERVIEW
Build a comprehensive expense tracking system with modern UI, robust backend, and real-time features. This will serve as the foundation for implementing complete DevOps pipeline.

## 🛠 TECH STACK SPECIFICATION

### FRONTEND (Next.js 14 with App Router)
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS + Shadcn/ui components
- **State Management**: Zustand
- **Forms**: React Hook Form with Zod validation
- **Icons**: Lucide React
- **Table**: TanStack Table v8
- **Authentication**: NextAuth.js (ready for implementation)

### BACKEND (Node.js + Express)
- **Runtime**: Node.js 18+
- **Framework**: Express.js with TypeScript
- **Database**: MongoDB with Mongoose ODM
- **API Documentation**: Swagger/OpenAPI
- **Validation**: Joi + Express Validator
- **Security**: Helmet, CORS, Rate Limiting
- **Logging**: Winston with rotating files

### DATABASE SCHEMA
```javascript
User {
  _id: ObjectId
  email: string
  password: string (hashed)
  name: string
  createdAt: Date
  updatedAt: Date
}

Expense {
  _id: ObjectId
  userId: ObjectId (ref: User)
  title: string (required)
  amount: number (required, min: 0)
  category: string (enum: ['Food', 'Transport', 'Entertainment', 'Utilities', 'Healthcare', 'Other'])
  description: string
  date: Date (default: now)
  tags: string[]
  createdAt: Date
  updatedAt: Date
}

Budget {
  _id: ObjectId
  userId: ObjectId
  category: string
  amount: number
  month: Date
  createdAt: Date
}
```

## 📁 PROJECT STRUCTURE
```
expense-tracker/
├── frontend/                 # Next.js 14 application
│   ├── app/
│   │   ├── (auth)/
│   │   │   ├── login/
│   │   │   └── register/
│   │   ├── dashboard/
│   │   │   ├── page.tsx
│   │   │   ├── expenses/
│   │   │   │   ├── page.tsx
│   │   │   │   └── [id]/
│   │   │   │       └── page.tsx
│   │   │   ├── analytics/
│   │   │   │   └── page.tsx
│   │   │   └── layout.tsx
│   │   ├── api/              # Next.js API routes
│   │   │   ├── auth/
│   │   │   └── expenses/
│   │   ├── globals.css
│   │   ├── layout.tsx
│   │   └── page.tsx
│   ├── components/
│   │   ├── ui/               # Shadcn components
│   │   ├── forms/
│   │   │   ├── AddExpenseForm.tsx
│   │   │   ├── EditExpenseForm.tsx
│   │   │   └── BudgetForm.tsx
│   │   ├── charts/
│   │   │   ├── ExpenseChart.tsx
│   │   │   └── CategoryPieChart.tsx
│   │   └── layout/
│   │       ├── Header.tsx
│   │       ├── Sidebar.tsx
│   │       └── MobileNav.tsx
│   ├── lib/
│   │   ├── utils.ts
│   │   ├── validations.ts
│   │   ├── store.ts          # Zustand store
│   │   └── auth.ts
│   ├── types/
│   │   └── index.ts
│   ├── tailwind.config.js
│   ├── next.config.js
│   └── package.json
├── backend/                  # Express.js API
│   ├── src/
│   │   ├── controllers/
│   │   │   ├── expenseController.ts
│   │   │   ├── userController.ts
│   │   │   ├── authController.ts
│   │   │   └── analyticsController.ts
│   │   ├── models/
│   │   │   ├── User.ts
│   │   │   ├── Expense.ts
│   │   │   └── Budget.ts
│   │   ├── routes/
│   │   │   ├── expenses.ts
│   │   │   ├── auth.ts
│   │   │   ├── users.ts
│   │   │   └── analytics.ts
│   │   ├── middleware/
│   │   │   ├── auth.ts
│   │   │   ├── validation.ts
│   │   │   ├── errorHandler.ts
│   │   │   └── logger.ts
│   │   ├── utils/
│   │   │   ├── database.ts
│   │   │   ├── apiResponse.ts
│   │   │   └── helpers.ts
│   │   ├── types/
│   │   │   └── index.ts
│   │   └── app.ts
│   ├── package.json
│   ├── tsconfig.json
│   └── swagger.json
├── shared/                   # Shared types and utilities
│   └── types.ts
├── docker-compose.yml
├── README.md
└── package.json (workspace)
```

## 🎨 UI/UX REQUIREMENTS

### PAGES & COMPONENTS
1. **Landing Page** - Hero section, features, call-to-action
2. **Authentication Pages** - Login & Register with form validation
3. **Dashboard** - Overview with stats, recent expenses, charts
4. **Expenses Management** - CRUD operations with data table
5. **Analytics** - Charts and insights with filters
6. **Settings** - User preferences and budget settings

### SPECIFIC COMPONENTS TO BUILD:
- DataTable with sorting, filtering, pagination
- Expense form with category selector and date picker
- Charts: Monthly trends, category distribution, spending vs budget
- Responsive navigation with mobile hamburger menu
- Loading states and error boundaries
- Toast notifications for actions

## 🔧 BACKEND API ENDPOINTS

### AUTHENTICATION
- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `POST /api/auth/logout` - User logout
- `GET /api/auth/me` - Get current user

### EXPENSES
- `GET /api/expenses` - Get all expenses (with pagination, filtering)
- `GET /api/expenses/:id` - Get single expense
- `POST /api/expenses` - Create new expense
- `PUT /api/expenses/:id` - Update expense
- `DELETE /api/expenses/:id` - Delete expense
- `GET /api/expenses/stats/summary` - Get expense statistics

### ANALYTICS
- `GET /api/analytics/monthly` - Monthly spending trends
- `GET /api/analytics/categories` - Category-wise breakdown
- `GET /api/analytics/budget-vs-actual` - Budget comparison

### USERS
- `GET /api/users/profile` - Get user profile
- `PUT /api/users/profile` - Update user profile

## 🎯 FEATURE REQUIREMENTS

### CORE FEATURES
1. **User Authentication** - Register, login, logout with JWT
2. **Expense CRUD** - Add, view, edit, delete expenses
3. **Category Management** - Predefined categories with color coding
4. **Data Visualization** - Charts for spending patterns
5. **Search & Filter** - By date range, category, amount
6. **Responsive Design** - Mobile-first approach

### ADVANCED FEATURES
1. **Budget Setting** - Monthly budgets per category
2. **Export Data** - CSV export of expenses
3. **Receipt Upload** - Image attachment (ready for implementation)
4. **Recurring Expenses** - Setup automatic recurring entries
5. **Dark/Light Mode** - Theme toggle

## 📊 DATA VISUALIZATION
- **Bar Chart**: Monthly spending trends
- **Pie Chart**: Expense distribution by category
- **Line Chart**: Budget vs actual spending
- **Stats Cards**: Total spent, average daily, remaining budget

## 🔒 SECURITY REQUIREMENTS
- Password hashing with bcrypt
- JWT token-based authentication
- Input validation and sanitization
- CORS configuration
- Rate limiting on auth endpoints
- Helmet for security headers

## 🐳 DOCKER SETUP
```yaml
# docker-compose.yml for local development
version: '3.8'
services:
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: expensetracker
    volumes:
      - mongodb_data:/data/db

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/expensetracker?authSource=admin
      - JWT_SECRET=your-jwt-secret
    depends_on:
      - mongodb
    volumes:
      - ./backend:/app
      - /app/node_modules

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:5000/api
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  mongodb_data:
```

## 📝 DELIVERABLES CHECKLIST

### FRONTEND (Next.js)
✅ Complete Next.js 14 app with App Router  
✅ All pages with responsive design  
✅ Form components with validation  
✅ Data tables with sorting/filtering  
✅ Charts and analytics components  
✅ State management with Zustand  
✅ TypeScript throughout  
✅ Tailwind CSS styling with Shadcn/ui  

### BACKEND (Express + TypeScript)
✅ RESTful API with proper structure  
✅ Authentication system with JWT  
✅ CRUD operations for expenses  
✅ Analytics endpoints  
✅ Error handling middleware  
✅ Input validation  
✅ API documentation with Swagger  
✅ Database models with Mongoose  

### INFRASTRUCTURE
✅ Docker configuration for local development  
✅ Environment variables setup  
✅ Database seeding script  
✅ API documentation  

## 🚀 GETTING STARTED INSTRUCTIONS
Provide complete setup instructions including:
1. Environment setup (.env files)
2. Database initialization
3. Installation and running commands
4. API testing procedures

## 🎯 SUCCESS CRITERIA
- Application runs without errors using `docker-compose up`
- All API endpoints work and return proper responses
- Frontend connects to backend successfully
- User can register, login, and manage expenses
- Charts display meaningful data
- Responsive design works on mobile/desktop

Generate COMPLETE, PRODUCTION-READY code for all files. Include detailed comments and follow best practices for TypeScript, React, and Node.js.
```

---

## 📋 **YOUR IMPLEMENTATION CHECKLIST**

### **Phase 1: Core Application Setup** ✅
- [ ] Backend API with Express + TypeScript
- [ ] Next.js frontend with App Router
- [ ] MongoDB database with schemas
- [ ] Docker compose setup
- [ ] Basic CRUD operations

### **Phase 2: Features Implementation** ✅
- [ ] User authentication system
- [ ] Expense management UI
- [ ] Data visualization charts
- [ ] Responsive design
- [ ] Form validations

### **Phase 3: Polish & Testing** ✅
- [ ] Error handling
- [ ] Loading states
- [ ] API documentation
- [ ] Testing all features

### **Once Completed - Ready for DevOps:**
1. **Git Repository** - Initialize and push
2. **CI/CD Pipeline** - GitHub Actions setup
3. **Containerization** - Docker optimization
4. **Kubernetes** - Deployment manifests
5. **Infrastructure** - Terraform/Ansible

---

**Rating: 🔥 10/10** - This prompt provides exact specifications, complete file structure, and leaves no room for ambiguity. Perfect for generating a portfolio-ready full stack application.